services:
  # API service for production
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: ${PROJECT_NAME:-myapp}_api
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      - SERVER_PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5433
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-myapp}
      - DB_SSLMODE=disable
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - GO_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: ${PROJECT_NAME:-myapp}_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-myapp}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
